"""
Velodyne VLP-32C激光雷达通信及数据解析程序
主要用来测试雷达的距离精度
author: yunshuixin
@2018.10
"""

import socket
import math
import time
import sys
from time import sleep

# UDP通信
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
s.bind(('', 2368))
s.connect(('192.168.1.201', 2368))

# 传感器信息
marker = b'\xffee'
n_azimuth_bytes = 2
n_channels = 32
n_data_block_bytes = 100
n_channel_data_bytes = 3
n_data_blocks = 12
pitch_deg = [-25.0, -1.0, -1.667, -15.639, -11.31, 0.0, -0.667, -8.843,
             -7.254, 0.333, -0.333, -6.148, -5.333, 1.333, 0.667, -4.0,
             -4.667, 1.667, 1.0, -3.667, -3.333, 3.333, 2.333, -2.667,
             -3.0, 7.0, 4.667, 2.333, -2.0, 15.0, 10.333, -1.333]
delta_deg = [1.4, -4.2, 1.4, -1.4, 1.4, -1.4, 4.2, -1.4,
             1.4, -4.2, 1.4, -1.4, 4.2, -1.4, 4.2, -1.4,
             1.4, -4.2, 1.4, -4.2, 4.2, -1.4, 1.4, -1.4,
             1.4, -1.4, 1.4, -4.2, 4.2, -1.4, 1.4, -1.4]

deg2rad = math.pi / 180.0
rad2deg = 180.0 / math.pi
dist_meas = 4.0
s_name = str(dist_meas) + '.csv'  # 存储的文件名


# 输入三字节数据，返回距离值
def get_distance(data_per_channel):
    distance = (int(data_per_channel[1]) * 256 + int(data_per_channel[0])) * 4.0 / 1000.0
    return distance


# 输入channel值、距离值、航向角度，返回(x,y,z)
def get_xyz(channel, dist, azimuth):
    """
    x = dist * math.cos(pitch_deg[channel] * deg2rad) * math.sin((azimuth + delta_deg[channel]) * deg2rad)
    y = dist * math.cos(pitch_deg[channel] * deg2rad) * math.cos((azimuth + delta_deg[channel]) * deg2rad)
    z = dist * math.sin(pitch_deg[channel] * deg2rad)
    """
    x = dist * math.cos(pitch_deg[channel] * deg2rad) * math.sin(azimuth * deg2rad)
    y = dist * math.cos(pitch_deg[channel] * deg2rad) * math.cos(azimuth * deg2rad)
    z = dist * math.sin(pitch_deg[channel] * deg2rad)
    return x, y, z


# print(get_XYZ(21, 2.386, 0.16))  # (-0.051546641,2.381406307,0.138719708)


# 输入两字节数据，返回角度值
def get_azimuth(azimuth_data):
    angle = (int(azimuth_data[1]) * 256 + int(azimuth_data[0])) / 100.0
    return angle


def get_precision_azimuth(data_packet):  # 传引用
    i = 0
    azimuth_gap = 0.0
    for i in range(12):
        if i < 11:
            if data_packet[i + 1]['Azimuth'] < data_packet[i + 1]['Azimuth']:
                data_packet[i + 1]['Azimuth'] += 360
            azimuth_gap = data_packet[i + 1]['Azimuth'] - data_packet[i]['Azimuth']
        j = 0
        while j < 32:
            data_packet[i]['channel %d' % (j)][0] = data_packet[i]['Azimuth'] + azimuth_gap * j * 2.304 / 55.296 + \
                                                    delta_deg[j]
            data_packet[i]['channel %d' % (j + 1)][0] = data_packet[i]['Azimuth'] + azimuth_gap * j * 2.304 / 55.296 + \
                                                        delta_deg[j + 1]
            if data_packet[i]['channel %d' % (j)][0] > 360:
                data_packet[i]['channel %d' % (j)][0] -= 360

            elif data_packet[i]['channel %d' % (j)][0] < 0:
                data_packet[i]['channel %d' % (j)][0] += 360

            if data_packet[i]['channel %d' % (j + 1)][0] > 360:
                data_packet[i]['channel %d' % (j + 1)][0] -= 360

            elif data_packet[i]['channel %d' % (j + 1)][0] < 0:
                data_packet[i]['channel %d' % (j + 1)][0] += 360

            j += 2


# 每个data_packet包含12个data_block, data_block形式如下，每个channel包含azimuth和distance：
"""
data_block = {'Azimuth': .0,
              'channel 0': [.0, .0], 'channel 1': [.0, .0], 'channel 2': [.0, .0], ' channel 3': [.0, .0], 
              'channel 4': [.0, .0], 'channel 5': [.0, .0], 'channel 6': [.0, .0], 'channel 7': [.0, .0], 
              'channel 8': [.0, .0], 'channel 9': [.0, .0], 'channel 10': [.0, .0], 'channel 11': [.0, .0], 
              'channel 12': [.0, .0], 'channel 13': [.0, .0], 'channel 14': [.0, .0], 'channel 15': [.0, .0], 
              'channel 16': [.0, .0], 'channel 17': [.0, .0], 'channel 18': [.0, .0], 'channel 19': [.0, .0], 
              'channel 20': [.0, .0], 'channel 21': [.0, .0], 'channel 22': [.0, .0], 'channel 23': [.0, .0], 
              'channel 24': [.0, .0], 'channel 25': [.0, .0], 'channel 26': [.0, .0], 'channel 27': [.0, .0], 
              'channel 28': [.0, .0], 'channel 29': [.0, .0], 'channel 30': [.0, .0], 'channel 31': [.0, .0]}
"""


# 返回data packet
def getinfo(recv_Data):
    data_packet = []
    for i in range(n_data_blocks):
        data_block = dict()
        block_azimuth = get_azimuth(
            recv_Data[i * n_data_block_bytes + 2: i * n_data_block_bytes + 4])  # ffee标志位后的两字节为azimuth
        data_block.update({'Azimuth': block_azimuth})
        for j in range(n_channels):
            s_t = 'channel ' + str(j)
            dist = get_distance(recv_Data[
                                i * n_data_block_bytes + 4 + j * n_channel_data_bytes: i * n_data_block_bytes + 7 + j * n_channel_data_bytes])
            data_block.update({s_t: [block_azimuth, dist]})  # 此处尚未计及精确的azimuth
        data_packet.append(data_block)
    get_precision_azimuth(data_packet)
    return data_packet


"""
t = b'\x89u'
t = b'\xff\xee%\x1f\xd2\x00-\xa6\x04'
print(t[4], t[5])
print(get_azimuth(t[2:4]))
print(get_distance(t[4:7]))

# sample data
recvData_1 = b'\xff\xee%\x1f\xd2\x00-\xa6\x04\x03\xc1\x04\x05\xcf\x00\x04\xcd\x00\x03\x00\x00\x16\x91\x04\x04\xc3\x00\x08\xbf\x000F\x05o\x8c\x04\x02\xc1\x004\xbe\x00d\x00\x00\x1f#\x05$\xc5\x00S\xbe\x000F\x05<.\x05j\xc1\x00\x1a\x00\x00\x14\xc7\x00\x040\x05\x1e\x9f\x04\x02\xbd\x00\x15F\x05\t\xc6\x000\x9f\x04\x00\xb8\x04\x03k\x05X\xc3\x00)\x99\x04\x03\xff\xee9\x1f\xd2\x00-\xa6\x04\x03\xc1\x04\x06\xd1\x00\x04\xce\x00\x035\x05\'\x91\x04\x04\xc3\x00\x08\xc0\x004E\x05o\x8f\x04\x02\xc1\x002\xc1\x00\t5\x05\r!\x05\x1e\xc5\x00S\xc0\x007C\x05&/\x05j\xc2\x00\x1c\xbc\x00\x14\xc6\x00\x04.\x05 \x9c\x04\x02\xbb\x00\x15C\x05\x07\xc9\x00$\x9f\x04\x00\xba\x04\x03j\x05X\xc5\x00)\x99\x04\x03\xff\xeeM\x1f\xd2\x00-\xa5\x04\x03\xc0\x04\x06\xd0\x00\x04\xcc\x00\x033\x059\xa2\x04\x02\xc3\x00\x0b\xbf\x004E\x05n\x8d\x04\x02\xc1\x00/\xbe\x00d\x00\x007\x1f\x05\x11\xc2\x00S\xbf\x000A\x05"-\x05j\xc2\x00\x1c\xbc\x00\x15\xc6\x00\x04-\x05\x19\x96\x04\x01\xbc\x00\x15@\x05\x08\xcd\x000\xa0\x04\x00\xb9\x04\x03i\x05X\xc4\x00)\x98\x04\x03\xff\xee`\x1f\xd4\x00-\xa6\x04\x04\xc0\x04\x08\xd0\x00\x04\xcf\x00\x032\x05<\xbc\x04\x02\xc2\x00\x0b\xbf\x008B\x05o\x8f\x04\x02\xc2\x004\xc0\x00\t\x00\x00e\x1f\x05\x0b\xc4\x00S\xc1\x00;@\x05!+\x05j\xc3\x00\x1e\xbd\x00\x16\xcf\x00\x04\x00\x00^\x9e\x04\x02\xbb\x00\x15C\x05\x07\xcb\x000\x9b\x04\x00\xb5\x04\x02h\x05X\xc7\x001\x99\x04\x04\xff\xeet\x1f\xd4\x00"\xa3\x04\x04\xc1\x04\x06\xd0\x00\x04\xce\x00\x03/\x05;\xc0\x04\x01\xc3\x00\x0b\xbe\x004A\x05o\x8e\x04\x02\xc1\x002\xbf\x00\t0\x05n \x05\x05\xc4\x00S\xc2\x009@\x05\x1e,\x05j\xc1\x00\x1e\xbe\x00\x19\xd4\x00\x045\x05n\x9a\x04\x02\xbc\x00\x1cA\x05\x06\xc6\x000\x9e\x04\x00\xb6\x04\x02e\x05:\xc7\x009\x96\x04\x04\xff\xee\x88\x1f\xcf\x00"\xa2\x04\x04\xbe\x04\x06\xcc\x00\x04\xcd\x00\x03/\x058\xcd\x04\x01\xc3\x00\x08\xbd\x006;\x05h\x8e\x04\x02\xc0\x002\xc0\x00\t2\x05q"\x05\x02\xc3\x00S\xc1\x007?\x05!+\x05k\xc1\x00 \xbc\x00\x18\xdd\x00\x04.\x05p\x9b\x04\x02\xbc\x00\x18D\x05\x04\xc1\x00H\xa1\x04\x00\xb7\x04\x02e\x05(\xc7\x00B\x96\x04\x04\xff\xee\x9c\x1f\xd1\x00"\xa2\x04\x04\xbb\x04\x06\xd1\x00\x04\xce\x00\x03+\x055\xcf\x00,\xc4\x00\x0b\xc0\x008;\x05h\x8d\x04\x02\xc1\x004\xbf\x00\t/\x05q%\x05\x01\xc2\x00]\xc1\x005>\x05.%\x05K\xc1\x00 \xbc\x00\x18\xe2\x00\x04+\x05q\x8c\x04\x01\xbb\x00\x18\xc7\x00!\xbe\x00T\x9e\x04\x00\xb5\x04\x01f\x05\x1f\xcb\x009\x95\x04\x04\xff\xee\xb0\x1f\xd0\x00"\xa0\x04\x04\xbc\x04\x08\xcf\x00\x04\xcd\x00\x03-\x055\xca\x00,\xc3\x00\x0b\xc5\x00C9\x05f\x8e\x04\x02\xc1\x004\xbf\x00d.\x05q"\x05\x01\xc2\x00d\xc0\x009=\x052&\x05<\xc0\x00 \xbf\x00\x17\xe1\x00\x04*\x05q\x99\x04\x02\xbd\x00\x18\xc8\x00)\xbc\x00H\x9e\x04\x00\xb9\x04\x01e\x05\x15\xca\x009\x96\x04\x04\xff\xee\xc4\x1f\xd3\x00"\xa1\x04\x04\xbf\x04\x0c\xcf\x00\x04\xcd\x00\x03-\x051\xd1\x00B\xc3\x00\x0b\xbe\x0027\x05g\x8c\x04\x01\xc2\x007\xc0\x00\t/\x05q\xbe\x00\x17\xc4\x00d\xbf\x007;\x05;$\x05H\xbf\x00 \xbf\x00\x18\xeb\x00\x04*\x05p\x87\x04\x01\xba\x00\x18\xc6\x00)\xb6\x00<\xa1\x04\x00\xc0\x00\x15d\x05\r\xd0\x00)\x95\x04\x04\xff\xee\xd8\x1f\xd2\x00"\xa0\x04\x04\xc0\x04\x18\xce\x00\x04\xcc\x00\x03+\x05.\xc7\x00,\xc5\x00\x0b\xbf\x0047\x05h\x8c\x04\x02\xc1\x00<\xc2\x00\t,\x05n\xc3\x00/\xc2\x00d\xc0\x007<\x05E$\x05I\xc1\x00"\xc0\x00\x16\xe7\x00\x04+\x05p\x88\x04\x01\xbc\x00\x18\xc0\x00!\xb7\x00<\xa1\x04\x00\xbe\x00\x15d\x05\x06\xcf\x00!\x93\x04\x02\xff\xee\xec\x1f\xd0\x00"\x9d\x04\x04\xbe\x04\x0b\xcf\x00\x04\xcc\x00\x03+\x05-\xc4\x00,\xc2\x00\x0b\xbd\x00:5\x05h\x8a\x04\x01\xc2\x00>\xbe\x00\t,\x05n\xcb\x00#\xc4\x00d\xbf\x009<\x05,#\x05H\xbf\x00$\xbf\x00\x15\xea\x00\x04,\x05p\x8f\x04\x02\xc0\x00\x1c\xbf\x00!\xb6\x00<\x9d\x04\x01\xbc\x00\x15\x00\x00\x02;\x05\x03\n\x08\x02\xff\xee\x00 \xd1\x00"\x9d\x04\x04\xbc\x04\x0b\xce\x00\x04\xcd\x00\x03,\x05)\xbe\x00,\xc2\x00\x0b\xbd\x0046\x05f\x8d\x04\x01\xbf\x009\xc0\x00\n,\x05n\xc1\x00#\xc2\x00\x0c\xc2\x00;\x00\x00\x0e#\x05I\xc0\x00"\xba\x00\x14\xe4\x00\x04,\x05l\x8f\x04\x02\xbe\x00\x1c\xbb\x001\xb5\x00<\x9d\x04\x01\xbd\x00\x1f\xc2\x00\x07=\x05\x04y\x04\x00\x91\xdd\x80\x047('
recvData_2 = b'\xff\xee[*\xda\x008:\x05r\x00\x00\x17\xda\x00\x04\xd4\x00\x03L\x05\x18y\x05g\xce\x00\x02\xc9\x00\x0f<\x05s\xb3\x00\x15\xc0\x00%\xce\x00)\xb4\x00\x17w\x05j\xc9\x00)\xc8\x00\x119\x05<\xb2\x00\x11\xbd\x00b\xca\x00\x15\xc2\x00\x04\x00\x00\'N\x05#c\x05\x04\xce\x00\x10j\x05\x11<\x05ky\x05o\x87\x05k\x7f\x05kH\x057\xff\xeeo*\xd9\x008;\x05r\x00\x00\x05\xd4\x00\x04\xd3\x00\x03L\x05\x0c}\x05l\xcf\x00\x02\xc7\x00\r<\x05p\xb2\x00\x15\xc1\x00#\xcc\x00)\xaf\x00\x15y\x05j\xcb\x00)\xc8\x00\x119\x053\xb3\x00\x11\xbd\x00\\\xc7\x00\x0e\xc0\x00\x04i\x05\x10N\x05\x1ej\x05\x01\xcf\x00\x18j\x05\x0e:\x05j{\x05o\x87\x05k\x82\x05kH\x05-\xff\xee\x81*\xda\x008=\x05rh\x05\x03\xd6\x00\x04\xd5\x00\x03Q\x05\x05~\x05l\xce\x00\x02\xca\x00\r8\x05jk\x05\x03\xc1\x00%\xcb\x00)\xb1\x00\x15z\x05j\xc9\x00)\xc9\x00\x13;\x05\'\x00\x00?\xbd\x00`\xc9\x00\x0e\xc1\x00\x04j\x05\tS\x05\x18\xba\x00\n\xce\x00\x18j\x05\n=\x05k~\x05o\x89\x05j\x84\x05kI\x05%\xff\xee\x96*\xdb\x00-?\x05r\x00\x00N\xd7\x00\x04\xd7\x00\x03\xad\x00\x08\x80\x05l\xcd\x00\x02\xc9\x00\r6\x05f\x00\x00d\xc3\x00 \xd0\x00)\xb2\x00\x15|\x05j\xc8\x00)\xca\x00\x11<\x05\x1b\x00\x00K\xbf\x002\xc6\x00\x0e\xc2\x00\x04i\x05\x07T\x05\x12\xc3\x00\n\xca\x00\x10s\x05\n=\x05i\x81\x05o\x87\x05f\x86\x05kL\x05\x18\xff\xee\xab*\xdb\x00-@\x05r\x00\x00Y\xd9\x00\x04\xd7\x00\x03\xae\x00\x0b\x82\x05l\xcf\x00\x02\xca\x00\r7\x05f\x00\x00L\xc7\x00\x16\xcd\x00)\xae\x00\x15~\x05j\xcb\x00)\xc8\x00\x11>\x05\x0ej\x05j\xc0\x00"\xca\x00\x0e\xc4\x00\x04n\x05\x03S\x05\x0ce\x05\x02\xd1\x00\x18t\x05\x06>\x05i\x81\x05o\x87\x05]\x89\x05kN\x05\x0f\xff\xee\xbf*\xdc\x00-@\x05ri\x05p\xd8\x00\x04\xd6\x00\x03\xad\x00\r\x86\x05l\xcf\x00\x02\xca\x00\r9\x05fh\x05j\xc9\x00\x19\xcf\x00)\xaf\x00\x15\x80\x05j\xcb\x00)\xca\x00\x0e>\x05\x08m\x05j\xc1\x00\x1e\xc6\x00\x0e\xc2\x00\x04\x00\x00\'Y\x05\x0e\x00\x00\x15a\x05\x01\x00\x00\x18@\x05i\x83\x05o\x86\x05\\\x8a\x05kP\x05\x18\xff\xee\xd1*\xdb\x00-B\x05rk\x05p\xd8\x00\x04\xd6\x00\x03\xac\x00\x13\x86\x05l\xd3\x00\x02\xcc\x00\r=\x05fk\x05m\xc7\x00\x16\xcf\x00)\xb2\x00\x12\x81\x05j\xcb\x00)\xc9\x00\x0e\x00\x00\x07i\x05;\xc2\x00\x1e\xc9\x00\x0e\xc2\x00\x04\x00\x00CW\x05\x11l\x05\x04\x00\x001u\x05\x01A\x05h\x87\x05p\x85\x05X\x8c\x05k\x00\x00I\xff\xee\xe5*\xdd\x00-C\x05ql\x05p\xd6\x00\x04\xd6\x00\x03\xab\x00\x10\x89\x05l\xd3\x00\x02\xca\x00\x0bB\x05fq\x05p\xc9\x00\x14\xce\x00)\xaf\x00\x12\x82\x05j\xc9\x00)\xc9\x00\x11\xac\x00\nl\x05\'\xc3\x00\x1e\xc8\x00\x0e\xc0\x00\x04s\x05lX\x05\x13n\x05\x04i\x05\t\x00\x00\nD\x05h\x87\x05o\x87\x05X\x8e\x05kR\x05-\xff\xee\xfa*\xdb\x00-E\x05qm\x05p\xd7\x00\x04\xd6\x00\x03\xab\x00\x10\x8a\x05l\xd1\x00\x02\xcb\x00\r@\x05Br\x05p\xc9\x00\x16\xd0\x00\x1b\xaf\x00\x15\x86\x05j\xc9\x00)\xc7\x00\x0e\xad\x00\no\x05\x19\xc3\x00\x1e\xca\x00\x0e\xc1\x00\x04q\x05lZ\x05\x13o\x05\x03\x00\x00\x1e\x00\x00 E\x05g\x89\x05o\x88\x05X\x8f\x05kR\x05!\xff\xee\x0e+\xdf\x00-H\x05qp\x05p\xd5\x00\x04\xd7\x00\x03\xad\x00\x10\x8d\x05l\xd1\x00\x02\xca\x00\rA\x054r\x05j\xc8\x00\x16\xd1\x00\x1b\xae\x00\x15\x89\x05j\xcb\x00)\xc8\x00\x11\xae\x00\x0ct\x05?\xc2\x00\x1c\xca\x00\x0e\xbf\x00\x04t\x05o[\x05\x13r\x05\x03b\x05 \x00\x00eG\x05g\x8c\x05o\x89\x05X\x95\x05lX\x05\x11\xff\xee!+\xdc\x00-I\x05qs\x05p\xd9\x00\x04\xd7\x00\x03\xab\x00\r\x92\x05p\xd1\x00\x02\xcb\x00\x0bA\x05$t\x05F\xc9\x00\x16\xd2\x00\x1b\xaf\x00\x15\x8b\x05j\xca\x00)\xcb\x00\x11\xb0\x00\x0et\x05j\xc2\x00\x1a\xd0\x00\x0e\xc3\x00\x04u\x05q\\\x05\x13t\x05\x02d\x05\x1d{\x05pG\x05h\x8c\x05o\x8a\x05X\x96\x05l[\x05\x08\xff\xee6+\xdc\x00-K\x05pt\x05p\xdc\x00\x04\xd8\x00\x03\xae\x00\r\x95\x05p\xd4\x00\x02\xcb\x00\x0bC\x05\x16x\x05j\xc8\x00\x16\xd0\x00\x1b\xb0\x00\x12\x8f\x05j\xcb\x00)\xcc\x00\x0e\xb0\x00\x0ew\x05l\xc4\x00\x1a\xcd\x00\x0e\xca\x00\x04v\x05p]\x05\x12x\x05\x02g\x05\x15}\x05pI\x05g\x90\x05o\x8e\x05X\x99\x05m\x00\x00\r\xab\xfc\x80\x047('
recvData_3 = b'\xff\xeeJ+\xdd\x00-P\x05pu\x05p\xd7\x00\x04\xd7\x00\x03\xac\x00\r\x98\x05p\xd3\x00\x02\xcd\x00\x0bE\x05\tz\x05o\xc7\x00\x16\xd1\x00\x1b\xad\x00\x0f\x8f\x05j\xcc\x00)\xcb\x00\x0e\xaf\x00\x0e{\x05n\xc2\x00\x18\xcd\x00\x0e\xcd\x00\x04w\x05q_\x05\nv\x05\x02i\x05\n\x7f\x05pK\x05g\x92\x05o\x8f\x05X\x9a\x05l\xad\x00\x12\xff\xee^+\xdd\x00-K\x05lx\x05p\xd9\x00\x04\xd7\x00\x03\xac\x00\r\x98\x05p\xd1\x00\x02\xcd\x00\x0b\x00\x00\n{\x05p\xc9\x00\x16\xd0\x00\x1b\xac\x00\x0f\x90\x05j\xca\x00\x1f\xcc\x00\x0e\xb0\x00\x0f~\x05n\xc4\x00\x18\xce\x00\x0e\xd0\x00\x04z\x05q]\x05\x04z\x05\x02k\x05\t\x80\x05pK\x05f\x95\x05o\x91\x05X\x9b\x05o\xad\x00\r\xff\xeer+\xdf\x00-I\x05By\x05o\xd5\x00\x04\xd7\x00\x03\xad\x00\r\x9c\x05p\xd2\x00\x02\xcd\x00\x0b\xae\x00\x0e~\x05p\xca\x00\x16\xd2\x00\x1bj\x05\x06\x95\x05j\xcb\x00\x1f\xca\x00\x0e\xb0\x00\x0f\x7f\x05n\xc4\x00\x18\xce\x00\x0e\xcd\x00\x04|\x05q\xb9\x00\x07\x7f\x05\x02o\x05\x12\x82\x05pL\x05J\x97\x05o\x92\x05X\x9d\x05m\xad\x00\r\xff\xee\x86+\xde\x00-K\x051\x84\x05\x83\xda\x00\x04\xd9\x00\x03b\x05\x06\x9f\x05p\xd3\x00\x02\xce\x00\x0b\xae\x00\x0e\x7f\x05p\xc9\x00\x16\xd0\x00\x1b\x00\x00B\x97\x05j\xcc\x00\x1f\xca\x00\x0e\xb0\x00\x0f\x80\x05n\xc4\x00\x16\xce\x00\x0e\x85\x05\x00\x7f\x05q\xba\x00\n\x80\x05\x02p\x05(\x85\x05pN\x059\x98\x05o\x93\x05X\x9e\x05lc\x05\x04\xff\xee\x99+\xdd\x00-L\x05!\x7f\x05q\xd9\x00\x04\xd9\x00\x03\x00\x009\xa0\x05p\xd4\x00\x02\xce\x00\x0b\xb0\x00\x10\x81\x05p\xc9\x00\x14\xd1\x00\x1bd\x05?\x9a\x05i\xcb\x00\x1f\xcc\x00\x0e\xaf\x00\x0e\x84\x05n\xc3\x00\x18\xcd\x00\x0e\x00\x00\x12\x7f\x05qh\x05\x06\xcd\x00\x07o\x05,\x87\x05pO\x05&\x9c\x05o\x96\x05X\x9f\x05k\x00\x00"\xff\xee\xad+\xdf\x00-M\x05\x11\x82\x05{\xd9\x00\x04\xd6\x00\x03\x00\x00j\xa1\x05n\xd3\x00\x02\xce\x00\x0b\xaf\x00\x10\x83\x05p\xc9\x00\x16\xd0\x00\x1bd\x05D\x9d\x05i\xcc\x00\x1f\xcb\x00\x0e\xaf\x00\x0f\x85\x05n\xc3\x00\x18\xd0\x00\x0es\x05\x04\x81\x05q\x00\x00-\xce\x00\x07u\x05R\x8a\x05pS\x05\x19\x9e\x05o\x99\x05X\xa1\x05k\x00\x00e\xff\xee\xc2+\xe0\x00-R\x05\x08\x87\x05\x8b\xd8\x00\x04\xd9\x00\x03g\x05l\xa1\x05m\xd3\x00\x02\xce\x00\x0b\xb1\x00\x10\x86\x05p\xca\x00\x14\xd0\x00\x1bi\x053\x9e\x05j\xcc\x00\x1f\xcb\x00\x0e\xaf\x00\x0f\x88\x05n\xc4\x00\x16\xd0\x00\x0e\x00\x00-\x85\x05qn\x05\x1e\xcc\x00\nx\x05i\x8a\x05pT\x05\x18\xa0\x05o\x9b\x05X\xa2\x05kh\x05q\xff\xee\xd6+\xe1\x00-S\x05\x08\x8a\x05\x8b\xda\x00\x04\xd9\x00\x03i\x05l\xa3\x05l\xd3\x00\x02\xcf\x00\x0b\xaf\x00\x10\x88\x05p\xcc\x00\x14\xd1\x00\x1bh\x05\x18\xa1\x05i\xcc\x00\x1f\xca\x00\x0e\xaf\x00\x18\x8b\x05n\xc5\x00\x14\xd0\x00\x0eu\x05\n\x88\x05qj\x05\x17\xcc\x00\nx\x05j\x8d\x05pT\x05\x1d\xa1\x05o\x9b\x05X\xa4\x05kh\x05q\xff\xee\xe9+\xdf\x00-R\x05\x08\x8d\x05\x8b\xd8\x00\x04\xda\x00\x03k\x05l\xa5\x05l\xd4\x00\x02\xcf\x00\x0b\xaf\x00\x10\x89\x05p\xca\x00\x16\xd2\x00\x1bj\x05\x11\xa3\x05j\xcd\x00\x1f\xcb\x00\x0e\xac\x00\x13\x8c\x05n\xc5\x00\x14\xd2\x00\x0ev\x05\x07\x89\x05qn\x05\x15\xce\x00\ny\x05k\x90\x05pU\x05 \xa4\x05o\x9d\x05X\xa6\x05kj\x05q\xff\xee\xfd+\xe1\x00-\xaa\x00\x0b\x8f\x05\x8b\xdd\x00\x04\xdb\x00\x03o\x05j\xa7\x05l\xd7\x00\x02\xcf\x00\t\xb1\x00\x10\x8c\x05p\xcb\x00\x11\xd3\x00\x1b\x00\x00U\xa7\x05k\xcd\x00\x1f\xcd\x00\x0e\xaf\x00\x13\x8e\x05n\xc3\x00\x14\xd0\x00\x0ex\x05\x06\x8c\x05qn\x05\x15\xcd\x00\n|\x05j\x92\x05pV\x05$\xa7\x05o\xa1\x05X\xa7\x05kk\x05q\xff\xee\x11,\xde\x00-\xaa\x00\x0c\x8f\x05\x8b\xd8\x00\x04\xdd\x00\x03m\x05a\xa9\x05l\xd6\x00\x02\xd0\x00\t\xb0\x00\x10\x8e\x05p\xcd\x00\x14\xd2\x00\x1bm\x05o\xa8\x05k\xcd\x00\x1f\xcd\x00\x0c\xaf\x00\x15\x91\x05n\xc4\x00\x12\xcf\x00\x0e|\x05\x0c\x8d\x05qn\x05\x15\xce\x00\n}\x05k\x95\x05pY\x05.\xab\x05o\xa3\x05Z\xa9\x05km\x05q\xff\xee%,\xe0\x00-\xaa\x00\x0c\x92\x05\x8b\xd6\x00\x04\xd9\x00\x03p\x05a\xab\x05l\xd4\x00\x02\xd1\x00\x0b\xb1\x00\x10\x90\x05p\xcc\x00\x11\xd5\x00\x1bq\x05q\xa8\x05j\xcc\x00\x1f\xcb\x00\x0c\xad\x00\x15\x93\x05n\xc6\x00\x14\xcc\x00\x07|\x05\x11\x90\x05qq\x05\x15\xcf\x00\n\x7f\x05k\x96\x05pX\x051\xae\x05o\xa9\x05f\xac\x05kp\x05qC\xff\x80\x047('

d_p = getinfo(recvData_1)
for i in range(12):
    print("block%d azimuth_head:%f" % (i, d_p[i]['Azimuth']))
    for j in range(32):
        print("channel %d azimuth:%f, channel %d distance:%f" % (
            j, d_p[i]['channel %d' % j][0], j, d_p[i]['channel %d' % j][1]))
"""

with open(s_name, 'a') as f:
    f.write("time, Azimuth, channel 5 distance, channel5 X, channel5 Y, channel5 Z, error\n")
    f.close()

time_start = time.clock()

while True:
    recvData = s.recv(1248)  # 接收udp数据
    # print(recvData)
    li1 = []
    d_p = getinfo(recvData)  # 解析data_packet
    for i in range(12):
        # li = [d_p[i]['Azimuth']]
        t = d_p[i]['channel 5'][1]  # 默认为channel 5距离
        # 1-(-1), 5-(0), 9-(0.333),10-(-0.333), 18-(1), 考虑垂直放置误差，取用最短距离
        """
        if min(d_p[i]['channel 5'][1], d_p[i]['channel 9'][1], d_p[i]['channel 10'][1]) != 0:
            t = min(d_p[i]['channel 5'][1], d_p[i]['channel 9'][1], d_p[i]['channel 10'][1])
            # t = (d_p[i]['channel 5'][1] + d_p[i]['channel 9'][1] + d_p[i]['channel 10'][1]) / 3
        """
        # li = [d_p[i]['channel 5'][0], d_p[i]['channel 5'][1]]  # data_block的azimuth、channel5（0度俯仰角）的distance
        li = [d_p[i]['channel 5'][0], t]
        li1.append(li)  # li1包含12个data_block的azimuth、channel5（0度俯仰角）的distance
    for i in range(12):
        # print("Azimuth:", li1[i][0], "Channel distance", li1[i][1:33])
        if (li1[i][0] < 4.0 or li1[i][0] > 356.0) and li1[i][1] != .0:  # 限定航向角度范围
            with open(s_name, 'a') as f:
                time_elapse = time.clock() - time_start
                # 写入时间、角度、距离、X、Y、Z、error
                f.write("%f, %f, %f, %f, %f, %f, %f\n" % (
                    time_elapse, li1[i][0], li1[i][1], get_xyz(5, li1[i][1], li1[i][0])[0],
                    get_xyz(5, li1[i][1], li1[i][0])[1], get_xyz(5, li1[i][1], li1[i][0])[2],
                    get_xyz(5, li1[i][1], li1[i][0])[1] - dist_meas))
            f.close()
            print(time_elapse, "Azimuth:", li1[i][0], "channel 5 distance", li1[i][1], "channel 5 XYZ",
                  get_xyz(5, li1[i][1], li1[i][0]))
    # sleep(1)
    # print("delta_Azimuth:%f" % (li1[11][0] - li1[10][0]))  # 5hz:0.09、0.1、0.11, 10hz:0.18、0.19、0.2
